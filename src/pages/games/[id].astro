---
// Import section components
import MainLayout from "@/layouts/MainLayout.astro";
import ProductTabBtn from "@components/ui/buttons/ProductTabBtn.astro";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import { Image } from "astro:assets";
import { getCollection, type CollectionEntry } from "astro:content";
import { SITE } from "@data/constants";

// Global declaration for gsap animation library
declare global {
  interface Window {
    gsap: any;
  }
}

// This gets the static paths for all the unique products

export async function getStaticPaths() {
    const gameEntries = await getCollection("games", ({ id }) =>
    id.startsWith("en/")
  );
  return gameEntries.map((game) => {
    const idWithoutLang = game.id.replace(/^en\//, ""); // Remove the "en/" prefix
    return {
      params: { id: idWithoutLang },
      props: { game },
    };
  });
}

const { game } = Astro.props;

const pageTitle: string = `${game.data.title} | ${SITE.title}`;
---

<MainLayout title={pageTitle}>
  <div id="overlay" class="fixed inset-0 bg-neutral-200 dark:bg-neutral-800">
  </div>

  <section
    class="mx-auto flex max-w-[85rem] flex-col px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full"
  >
    <div>
      <p
        id="fadeText"
        class="mb-8 max-w-prose text-pretty font-light text-neutral-700 dark:text-neutral-300 sm:text-xl"
      >
        {game.data.main?.content}
      </p>
    </div>
    <div
      class="flex flex-col items-center justify-between space-y-4 sm:flex-row sm:space-y-0"
    >
      <div id="fadeInUp">
        <h1
          class="block text-4xl font-bold tracking-tighter text-neutral-800 dark:text-neutral-200 sm:text-5xl md:text-6xl lg:text-7xl"
        >
          {game.data.title}
        </h1>
        <p class="text-lg text-neutral-600 dark:text-neutral-400">
          {game.data.description}
        </p>
      </div>
      <div>
        <Image
          id="fadeInMoveRight"
          src={game.data.main?.imgMain}
          class="w-[600px]"
          alt={game.data.main?.imgAlt}
          format={"avif"}
          loading={"eager"}
        />
      </div>
    </div>
  </section>

  <div class="mx-auto max-w-[85rem] px-4 pt-10 sm:px-6 lg:px-8 lg:pt-14">
    <nav
      class="mx-auto grid max-w-6xl gap-y-px sm:flex sm:gap-x-4 sm:gap-y-0"
      aria-label="Tabs"
      role="tablist"
    >
      {
        game.data.tabs?.map((tab, index) => (
          <ProductTabBtn
            title={tab.title}
            id={tab.id}
            dataTab={tab.dataTab}
            first={index === 0}
          />
        ))
      }
    </nav>

    <div class="mt-12 md:mt-16">
        {game.data.tabs?.map((tab, index) => (
            <div id={tab.dataTab.slice(1)} class={index !== 0 ? "hidden" : ""} role="tabpanel">
                <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
                   {/* Introduction Tab Content */}
                     {tab.title === "Introduction" && (
                        <div class="prose max-w-none text-neutral-700 dark:text-neutral-300">
                            {game.data.introduction}
                        </div>
                    )}
                     {/* Description Tab Content */}
                    {tab.title === "Description" && (
                        <div class="grid gap-12 md:grid-cols-2">
                            <div class="lg:w-3/4">
                                <h2
                                  class="text-balance text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 md:leading-tight lg:text-4xl"
                                >
                                    {game.data.longDescription?.title}
                                </h2>
                                <p
                                  class="mt-3 text-pretty text-neutral-600 dark:text-neutral-400"
                                >
                                    {game.data.longDescription?.subTitle}
                                </p>
                                <p class="mt-5">
                                  <PrimaryCTA
                                    title={game.data.longDescription?.btnTitle}
                                    url={game.data.longDescription?.btnURL}
                                  />
                                </p>
                            </div>

                            <div class="space-y-6 lg:space-y-10">
                              {
                                game.data.descriptionList?.map((list) => (
                                  <div class="flex">
                                    <div>
                                      <h3 class="text-base font-bold text-neutral-800 dark:text-neutral-200 sm:text-lg">
                                        {list.title}
                                      </h3>
                                      <p class="mt-1 text-neutral-600 dark:text-neutral-400">
                                        {list.subTitle}
                                      </p>
                                    </div>
                                  </div>
                                ))
                              }
                            </div>
                        </div>
                    )}
                    {/* Gameplay Mechanics Tab Content */}
                     {tab.title === "Gameplay Mechanics" && (
                        <div class="prose max-w-none text-neutral-700 dark:text-neutral-300">
                            {game.data.gameplayMechanics}
                        </div>
                     )}
                    {/* Strategy and Tips Tab Content */}
                     {tab.title === "Strategy and Tips" && (
                       <div class="prose max-w-none text-neutral-700 dark:text-neutral-300">
                            {game.data.strategyAndTips}
                        </div>
                    )}
                    {/* How to Play Tab Content */}
                      {tab.title === "How to Play" && (
                        <div class="prose max-w-none text-neutral-700 dark:text-neutral-300">
                           {game.data.howToPlay}
                        </div>
                    )}
                    {/* Specifications Tab Content */}
                    {tab.title === "Specifications" && (
                        <div class="grid w-full grid-cols-1 gap-x-16 md:grid-cols-2">
                            <div class="max-w-md space-y-6">
                              {
                                game.data.specificationsLeft?.map((spec) => (
                                  <div>
                                    <h3 class="block font-bold text-neutral-800 dark:text-neutral-200">
                                      {spec.title}
                                    </h3>
                                    <p class="text-neutral-600 dark:text-neutral-400">
                                      {spec.subTitle}
                                    </p>
                                  </div>
                                ))
                              }
                            </div>
                            {game.data.specificationsRight ? (
                                <div class="mt-6 max-w-md space-y-6 md:ml-auto md:mt-0">
                                  {game.data.specificationsRight.map((spec) => (
                                    <div>
                                      <h3 class="block font-bold text-neutral-800 dark:text-neutral-200">
                                        {spec.title}
                                      </h3>
                                      <p class="text-neutral-600 dark:text-neutral-400">
                                        {spec.subTitle}
                                      </p>
                                    </div>
                                  ))}
                                </div>
                            ) :  game.data.tableData ? (
                                <div class="mt-6 space-y-6 md:ml-auto md:mt-0">
                                  <div class="flex flex-col">
                                    <div class="-m-1.5 overflow-x-auto">
                                      <div class="inline-block min-w-full p-1.5 align-middle">
                                        <div class="overflow-hidden">
                                          <table class="min-w-full divide-y divide-neutral-300 dark:divide-neutral-700">
                                            <thead>
                                            <tr>
                                              {game.data.tableData?.[0].feature?.map(
                                                (header) => (
                                                  <th
                                                    scope="col"
                                                    class="px-6 py-3 text-start text-xs font-medium uppercase text-neutral-500 dark:text-neutral-500"
                                                  >
                                                    {header}
                                                  </th>
                                                )
                                              )}
                                            </tr>
                                            </thead>
                                            <tbody class="divide-y divide-neutral-300 dark:divide-neutral-700">
                                            {game.data.tableData?.map((row) =>
                                                row.description.map((rowData) => (
                                                    <tr>
                                                        {rowData.map((cellValue) => (
                                                            <td class="whitespace-nowrap px-6 py-4 text-sm font-medium text-neutral-600 dark:text-neutral-400">
                                                                {cellValue}
                                                            </td>
                                                        ))}
                                                    </tr>
                                                ))
                                            )}
                                            </tbody>
                                          </table>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                            ) : null
                            }
                        </div>
                    )}
                    {/* Blueprints Tab Content */}
                     {tab.title === "Blueprints" && (
                        <div class="mx-auto mb-20 flex w-full md:mb-28 2xl:w-4/5">
                              {game.data.blueprints?.first && (
                                <div
                                  class="relative left-12 top-12 z-10 overflow-hidden rounded-xl shadow-lg md:left-12 md:top-16 md:-ml-12 lg:ml-0"
                                >
                                  <Image
                                    src={game.data.blueprints.first}
                                    class="h-full w-full object-cover object-center"
                                    alt="Blueprint Illustration"
                                    format={"avif"}
                                  />
                                </div>
                              )}

                             {game.data.blueprints?.second && (
                                  <div class="relative right-12 overflow-hidden rounded-xl shadow-xl">
                                    <Image
                                      src={game.data.blueprints.second}
                                      class="h-full w-full object-cover object-center"
                                      alt="Blueprint Illustration"
                                      format={"avif"}
                                    />
                                </div>
                              )}
                         </div>
                    )}
                    {/* Reviews Tab Content */}
                    {tab.title === "Reviews" && (
                        <div>
                          <h2> Customer Reviews</h2>
                          {game.data.reviews?.map((review) =>(
                            <div>
                                <h3>{review.author}</h3>
                                <p>{review.comment}</p>
                                <p>Rating: {review.rating}</p>
                            </div>
                          ))}
                        </div>
                    )}
                     {/* Gameplay Video Feeds Tab Content */}
                    {tab.title === "Gameplay Video Feeds" && (
                       <div>
                           {game.data.gameplayVideoFeeds?.map((video)=>(
                                 <div class="aspect-w-16 aspect-h-9">
                                     <iframe src={video.url} title="video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
                                 </div>
                             ))}
                         </div>
                    )}
                     {/* FAQ Tab Content */}
                      {tab.title === "FAQ" && (
                       <div>
                           <h2> Frequently Asked Questions</h2>
                          {game.data.faq?.map((faqItem, index) => (
                            <details key={index}>
                              <summary>
                                {faqItem.question}
                              </summary>
                              <p class="p-4">
                                {faqItem.answer}
                              </p>
                            </details>
                           ))}
                         </div>
                       )}
                </div>
            </div>
        ))}
    </div>
  </div>
</MainLayout>

<script>
  import { gsap } from "gsap";

  type AnimationSettings = {
      autoAlpha?: number;
      y?: number;
      x?: number;
      willChange?: string;
  };

  const animationDefaults = {
    fadeText: { autoAlpha: 0, y: 50, willChange: "transform, opacity" },
    fadeInUp: { autoAlpha: 0, y: 50, willChange: "transform, opacity" },
    fadeInMoveRight: { autoAlpha: 0, x: 300, willChange: "transform, opacity" },
  };

  function setElementAnimationDefaults(id: string, settings: AnimationSettings) {
    gsap.set(id, settings);
  }

  Object.entries(animationDefaults).forEach(([id, settings]) => {
    setElementAnimationDefaults(`#${id}`, settings);
  });


  let timeline = gsap.timeline({ defaults: { overwrite: "auto" } });

  timeline.to("#fadeText", {
    duration: 1.5,
    autoAlpha: 1,
    y: 0,
    delay: 1,
    ease: "power2.out",
  });

  timeline.to(
      "#fadeInUp",
      { duration: 1.5, autoAlpha: 1, y: 0, ease: "power2.out" },
      "-=1.2"
  );

    timeline.to(
    "#fadeInMoveRight",
    { duration: 1.5, autoAlpha: 1, x: 0, ease: "power2.inOut" },
    "-=1.4"
  );

  timeline.to("#overlay", { duration: 1, autoAlpha: 0, delay: 0.2 });

</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
      function handleTabState(button: Element, isActive: boolean) {
          const tabId = button.getAttribute("data-target");
          const contentElement = tabId ? document.querySelector(tabId) : null;
          const classesToAdd = ["active", "bg-neutral-100", ",hover:border-transparent", "dark:bg-white/[.05]"];
          const classesToRemove = ["text-orange-400", "dark:text-orange-300"];
          const headingClassesToAdd =  ["text-neutral-800", "dark:text-neutral-200"];
          const headingClassesToRemove = ["text-orange-400", "dark:text-orange-300"]


          if (isActive) {
              button.classList.add(...classesToAdd);
              if (contentElement) {
                contentElement.classList.remove("hidden");
              }
             changeHeadingStyle(button, headingClassesToRemove,headingClassesToAdd)

          } else {
              button.classList.remove(...classesToAdd)
            if (contentElement) {
                contentElement.classList.add("hidden");
             }
             changeHeadingStyle(button, headingClassesToAdd,headingClassesToRemove )
         }
      }


      function changeHeadingStyle(button: Element, addClasses: string[], removeClasses: string[]) {
        let heading = button.querySelector("span") as HTMLSpanElement;
        if (heading) {
            heading.classList.remove(...removeClasses);
            heading.classList.add(...addClasses);
        }
      }


      const tabButtons = document.querySelectorAll("[data-target]");

      if (tabButtons.length > 0) {
          changeHeadingStyle(tabButtons[0], ["text-orange-400", "dark:text-orange-300"], []);
      }

      tabButtons.forEach((button) => {
          button.addEventListener("click", () => {
              tabButtons.forEach((btn) => handleTabState(btn, btn === button));
              handleTabState(button, true);
          });
      });
  });
</script>
